name: CI/CD

on:
  push:
    branches: [dev, prod]
  pull_request:
    branches: [dev, prod]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    - run: npm ci
    - run: npm test

  deploy:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev-prod # environment name of the repo

    steps:
    # Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3
    
    ### Subsequent steps will now have access to the checked-out code ###

    # Install Node.js
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    - run: npm ci

    # Install the dependencies
    - name: Install dependencies
      run: npm install

    # Set DATABASE_URL based on branch update
    - name: Set DATABASE_URL based on branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}" >> $GITHUB_ENV
          echo "DIRECT_URL=${{ secrets.DIRECT_URL_DEV }}" >> $GITHUB_ENV
          echo "COGNITO_DOMAIN_SUFFIX=${{ secrets.COGNITO_DOMAIN_SUFFIX }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID_DEV }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET_DEV }}" >> $GITHUB_ENV
          echo "COGNITO_CALLBACK_URL=${{ secrets.COGNITO_CALLBACK_URL_DEV }}" >> $GITHUB_ENV
          echo "COGNITO_LOGOUT_URL=${{ secrets.COGNITO_LOGOUT_URL_DEV }}" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}" >> $GITHUB_ENV
          echo "DIRECT_URL=${{ secrets.DIRECT_URL_PROD }}" >> $GITHUB_ENV
          echo "COGNITO_DOMAIN_SUFFIX=${{ secrets.COGNITO_DOMAIN_SUFFIX }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID_PROD }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET_PROD }}" >> $GITHUB_ENV
          echo "COGNITO_CALLBACK_URL=${{ secrets.COGNITO_CALLBACK_URL_PROD }}" >> $GITHUB_ENV
          echo "COGNITO_LOGOUT_URL=${{ secrets.COGNITO_LOGOUT_URL_PROD }}" >> $GITHUB_ENV
        else
          echo "Unsupported branch for deployment"
          exit 1
        fi

    # Generate Prisma Client
    - name: Generate Prisma Client
      run: npx prisma generate

    # Run migrations
    - name: Run migrations
      run: npx prisma migrate

    # Install Serverless
    - name: Install Serverless Framework
      run: npm install -g serverless
      
    # Deploy to Serverless
    # - name: Serverless Deploy
    #   run: serverless deploy --stage ${GITHUB_REF##*/}
    #   env:
    #     SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Deploy to Serverless with logging to Github Actions
    - name: Serverless Deploy
      run: |
        serverless deploy --stage ${GITHUB_REF##*/} --verbose
        if [ $? -ne 0 ]; then
          echo "Deployment failed. Fetching CloudFormation events:"
          aws cloudformation describe-stack-events --stack-name prismix-serverless-${GITHUB_REF##*/} --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output table
        fi
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}