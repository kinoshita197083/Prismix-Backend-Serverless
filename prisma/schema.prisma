generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cognitoSub    String    @unique // Cognito User Sub
  projects      Project[]
  accounts      Account[]
  sessions      Session[]
}

model Project {
  id                 String           @id @default(uuid())
  userId             String
  projectName        String
  projectDescription String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id])
  jobs               Job[]
  projectSettings    ProjectSetting[]
}

enum JobStatus {
  IDLE
  INPROGRESS
  COMPLETED
  FAILED
}

model Job {
  id                  String    @id @default(uuid())
  projectId           String
  imageCount          Int       @default(0)
  processedImageCount Int       @default(0)
  jobStatus           JobStatus @default(IDLE)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  project             Project   @relation(fields: [projectId], references: [id])
}

model ProjectSetting {
  id           String   @id @default(uuid())
  projectId    String
  settingType  String
  settingValue Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id])
}

// Next Auth Models adjusted for Cognito
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
