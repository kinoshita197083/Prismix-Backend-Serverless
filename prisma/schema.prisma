generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
}

model Project {
  id                 String           @id @default(uuid())
  userId             String
  projectName        String
  projectDescription String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  jobs               Job[]
  user               User             @relation(fields: [userId], references: [id])
  projectSettings    ProjectSetting[]
}

model Job {
  id               String         @id @default(uuid())
  projectId        String
  imageCount       Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  jobStatus        JobStatus      @default(IDLE)
  projectSettingId String
  inputConnection  String
  outputConnection String
  project          Project        @relation(fields: [projectId], references: [id])
  ProjectSetting   ProjectSetting @relation(fields: [projectSettingId], references: [id])

  @@index([projectId])
  @@index([projectSettingId])
}

model ProjectSetting {
  id                 String   @id @default(uuid())
  projectId          String
  settingType        String
  settingValue       Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  settingDescription String
  settingName        String
  Job                Job[]
  project            Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  access_token      String?
  expires_at        Int?
  refresh_token     String?
  providerAccountId String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum JobStatus {
  IDLE
  INPROGRESS
  COMPLETED
  FAILED
}
