# Example Serverless Functions
main:
  handler: src/handlers/example.hello
  events:
    - http:
        path: /
        method: ANY
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: 
            Ref: ApiGatewayAuthorizer
        cors: true

# Entry Function - create project, generate pre-signed URLs
entryPoint:
  handler: src/handlers/entry.handler
  events:
    - http:
        path: upload
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: 
            Ref: ApiGatewayAuthorizer
        cors: true
  environment:
    BUCKET_NAME: ${self:custom.bucketName}
  role: EntryFunctionRole

# Initial Check Function - file corruptions check, queue image for processing
  enqueueImage:
    handler: src/handlers/enqueueImage.handler
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          existing: true
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
      SQS_QUEUE_URL: 
        Ref: EligibleImageQueue
    role: EnqueueImageFunctionRole

# Worker Function - main processing functions
worker:
  handler: src/handlers/worker.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt: [EligibleImageQueue, Arn]
  environment:
    IMAGES_TABLE: ${self:provider.environment.IMAGES_TABLE}
    PROCESSED_RESULTS_TABLE: ${self:provider.environment.PROCESSED_RESULTS_TABLE}
  role: WorkerFunctionRole

# Dead Letter Queue Processor
deadLetterQueueProcessor:
  handler: src/handlers/deadLetterQueueProcessor.handler
  events:
    - sqs:
        arn:
          Fn::GetAtt: [ImageDeadLetterQueue, Arn]
  environment:
    IMAGES_TABLE: ${self:provider.environment.IMAGES_TABLE}
  role: DeadLetterQueueProcessorRole

# getJobStatus:
#   handler: src/handlers/getJobStatus.handler
#   events:
#     - http:
#         path: job/{jobId}/status
#         method: get
#         authorizer:
#           type: COGNITO_USER_POOLS
#           authorizerId: 
#             Ref: ApiGatewayAuthorizer
#         cors: true
#   environment:
#     JOBS_TABLE: ${self:provider.environment.JOBS_TABLE}
#   role: JobStatusFunctionRole

# DynamoDB Stream - Job Completion Checker
jobCompletionChecker:
  handler: src/handlers/jobCompletionChecker.handler
  events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt: [ImagesTable, StreamArn]
  environment:
    IMAGES_TABLE: ${self:provider.environment.IMAGES_TABLE}
    CREATE_ZIP_LAMBDA: ${self:service}-${self:provider.stage}-createZip
  role: JobCompletionCheckerRole