# Service Definition
# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: prismix
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: prismix
service: prismix-serverless

plugins:
  - serverless-offline # for local development and testing
  - serverless-dotenv-plugin # for loading .env files
  # - serverless-layers # for creating layers

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: ${self:custom.memorySize.${self:provider.stage}}
  environment:
    ENVIRONMENT: ${self:provider.stage}
    TASKS_TABLE: ${self:service}-${self:provider.stage}-Tasks
    SQS_QUEUE_URL: 
      Ref: EligibleImageQueue
    DEAD_LETTER_QUEUE_URL:
      Ref: ImageDeadLetterQueue
    SUPABASE_URL: ${env:SUPABASE_URL}
    SUPABASE_API_KEY: ${env:SUPABASE_API_KEY}
  iam:
    role: BaseCloudWatchRole
  logs:
    # restApi:
      # accessLogging: true
      # executionLogging: true
      # level: INFO
      # fullExecutionData: true
    restApi: false
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  stackTags:
    CLOUDFORMATION_DEBUG_LOG: true

# re-usable variables
custom:
  memorySize:
    prod: 256
    dev: 128
  bucketName: ${self:service}-${self:provider.stage}-bucket
  queueName: ${self:service}-${self:provider.stage}-queue
  deploymentBucketName: ${self:service}-${self:provider.stage}-${self:provider.region}-deploys
  dotenv:
    path: .env.${self:provider.stage}
  deadLetterQueueName: ${self:service}-${self:provider.stage}-dlq
  # serverless-layers:
  #   dependenciesPath: ./package.json
  #   layersDeploymentBucket: prismix-lambda-layers

# Lambda Layers
layers:
  sharpLayer:
    path: layers/sharp-layer
    description: Sharp library for image processing functions
    compatibleArchitectures:
      - arm64
    compatibleRuntimes:
      - nodejs20.x
    allowedAccounts:
      - '*'
  supabaseLayer:
    path: layers/supabase-layer
    description: Supabase client for database operations
    compatibleRuntimes:
      - nodejs20.x
    allowedAccounts:
      - '*'

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!layers/**'
    - 'node_modules/sharp/**'
    - 'node_modules/supabase/**'
    - 'node_modules/@supabase/**'
    - 'node_modules/whatwg-url/**'
    - 'node_modules/**/*.js'
    - 'node_modules/**/*.json'

functions:
  ${file(src/resources/functions.yml)}

resources:
  - ${file(src/resources/s3.yml)}
  - ${file(src/resources/sqs.yml)}
  - ${file(src/resources/dynamodb.yml)}
  - ${file(src/resources/iam-roles.yml)}
  - Resources:
      LayersDeploymentBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:custom.deploymentBucketName}
          VersioningConfiguration:
            Status: Enabled

    Outputs:
      S3BucketName:
        Description: User uploaded images
        Value: 
          Ref: PrismixImageBucket
      SQSQueueUrl:
        Description: SQS Queue URL
        Value:
          Ref: EligibleImageQueue
      SQSQueueArn:
        Description: SQS Queue ARN
        Value:
          Fn::GetAtt: [EligibleImageQueue, Arn]
      DeadLetterQueueUrl:
        Description: Dead Letter Queue URL
        Value:
          Ref: ImageDeadLetterQueue
      DeadLetterQueueArn:
        Description: Dead Letter Queue ARN
        Value:
          Fn::GetAtt: [ImageDeadLetterQueue, Arn]
      TasksTableName:
        Description: DynamoDB Tasks Table Name
        Value: 
          Ref: TasksTable
      TasksTableArn:
        Description: DynamoDB Tasks Table ARN
        Value:
          Fn::GetAtt: [TasksTable, Arn]
      ServerlessDeploymentBucketName:
        Value: 
          Ref: LayersDeploymentBucket
        Export:
          Name: ${self:service}-${self:provider.stage}-ServerlessDeploymentBucketName