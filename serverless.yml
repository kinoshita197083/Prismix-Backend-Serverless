# Service Definition
# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: prismix
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: prismix
service: prismix-serverless

plugins:
  - serverless-offline # for local development and testing
  - serverless-dotenv-plugin # for loading .env files
  - serverless-layers # for creating layers

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: ${self:custom.memorySize.${self:provider.stage}}
  environment:
    ENVIRONMENT: ${self:provider.stage}
    IMAGES_TABLE: ${self:service}-${self:provider.stage}-Images
    PROCESSED_RESULTS_TABLE: ${self:service}-${self:provider.stage}-ProcessedResults
    SQS_QUEUE_URL: 
      Ref: EligibleImageQueue
    DEAD_LETTER_QUEUE_URL:
      Ref: ImageDeadLetterQueue
  iam:
    role: BaseCloudWatchRole
  logs:
    # restApi:
      # accessLogging: true
      # executionLogging: true
      # level: INFO
      # fullExecutionData: true
    restApi: false
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  stackTags:
    CLOUDFORMATION_DEBUG_LOG: true

# re-usable variables
custom:
  memorySize:
    prod: 256
    dev: 128
  bucketName: ${self:service}-${self:provider.stage}-bucket
  queueName: ${self:service}-${self:provider.stage}-queue
  deploymentBucketName: ${self:service}-${self:provider.stage}-${self:provider.region}-deploys
  dotenv:
    path: .env.${self:provider.stage}
  deadLetterQueueName: ${self:service}-${self:provider.stage}-dlq
  serverless-layers:
    layersDeploymentBucket: prismix-lambda-layers
    dependenciesPath: ./package.json
    retainLayers: true

package:
  individually: true
  exclude:
    - node_modules/**

functions:
  ${file(src/resources/functions.yml)}

resources:
  - ${file(src/resources/cognito.yml)}
  - ${file(src/resources/s3.yml)}
  - ${file(src/resources/sqs.yml)}
  - ${file(src/resources/dynamodb.yml)}
  - ${file(src/resources/iam-roles.yml)}
  - Resources:
      LayersDeploymentBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:custom.deploymentBucketName}
          VersioningConfiguration:
            Status: Enabled

    Outputs:
      UserPoolId:
        Description: Cognito User Pool ID
        Value: 
          Ref: CognitoUserPool
      UserPoolClientId:
        Description: Cognito User Pool Client ID
        Value: 
          Ref: CognitoUserPoolClient
      S3BucketName:
        Description: User uploaded images
        Value: 
          Ref: PrismixImageBucket
      SQSQueueUrl:
        Description: SQS Queue URL
        Value:
          Ref: EligibleImageQueue
      SQSQueueArn:
        Description: SQS Queue ARN
        Value:
          Fn::GetAtt: [EligibleImageQueue, Arn]
      DeadLetterQueueUrl:
        Description: Dead Letter Queue URL
        Value:
          Ref: ImageDeadLetterQueue
      DeadLetterQueueArn:
        Description: Dead Letter Queue ARN
        Value:
          Fn::GetAtt: [ImageDeadLetterQueue, Arn]
      EntryFunctionRoleArn:
        Description: ARN of the Upload Function IAM Role
        Value: 
          Fn::GetAtt: [EntryFunctionRole, Arn]
        Export:
          Name: ${self:service}-${self:provider.stage}-EntryFunctionRoleArn
      ImagesTableName:
        Description: DynamoDB Images Table Name
        Value: 
          Ref: ImagesTable
      ImagesTableArn:
        Description: DynamoDB Images Table ARN
        Value:
          Fn::GetAtt: [ImagesTable, Arn]
      ServerlessDeploymentBucketName:
        Value: 
          Ref: LayersDeploymentBucket
        Export:
          Name: ${self:service}-${self:provider.stage}-ServerlessDeploymentBucketName