# Service Definition
# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: prismix
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: prismix
service: prismix-serverless

plugins:
  - serverless-offline # for local development and testing
  - serverless-dotenv-plugin # for loading .env files

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: ${self:custom.memorySize.${self:provider.stage}}
  environment:
    ENVIRONMENT: ${self:provider.stage}
  iam:
    role: BaseCloudWatchRole
  logs:
    # restApi:
      # accessLogging: true
      # executionLogging: true
      # level: INFO
      # fullExecutionData: true
    restApi: false
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  stackTags:
    CLOUDFORMATION_DEBUG_LOG: true

# re-usable variables
custom:
  memorySize:
    prod: 256
    dev: 128
  bucketName: ${self:service}-${self:provider.stage}-bucket
  queueName: ${self:service}-${self:provider.stage}-queue
  # environment: ${file(.env.${self:provider.stage})}
  dotenv:
    path: .env.${self:provider.stage}

functions:
  main:
    handler: src/handlers/example.hello
    events:
      - http:
          path: /
          method: ANY
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
          cors: true

  processImage:
    handler: src/handlers/processImage.handler
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          existing: true
    environment:
      BUCKET_NAME: ${self:custom.bucketName}
      SQS_QUEUE_URL: 
        Ref: MySQSQueue
    role: ProcessImageFunctionRole

resources:
  Resources:

    # Basic IAM Role - used by Lambda functions
    BaseCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

    # S3 & SQS access IAM Role - used by Lambda functions
    ProcessImageFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: s3-sqs-access-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: 
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.bucketName}
                        - "/*"
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource:
                    Fn::GetAtt: [MySQSQueue, Arn]

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-UserPool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-UserPoolClient
        UserPoolId: 
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    PrismixImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    MySQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}

    ApiGatewayAccount:
      Type: AWS::ApiGateway::Account
      DependsOn: IamRoleApiGatewayCloudWatchLogs
      Properties:
        CloudWatchRoleArn: 
          Fn::GetAtt: [IamRoleApiGatewayCloudWatchLogs, Arn]

    IamRoleApiGatewayCloudWatchLogs:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  Outputs:
    UserPoolId:
      Description: Cognito User Pool ID
      Value: 
        Ref: CognitoUserPool
    UserPoolClientId:
      Description: Cognito User Pool Client ID
      Value: 
        Ref: CognitoUserPoolClient
    S3BucketName:
      Description: S3 Bucket Name
      Value: 
        Ref: PrismixImageBucket