# Service Definition
# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: prismix
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: prismix
service: prismix-serverless

plugins:
  - serverless-offline # for local development and testing
  - serverless-dotenv-plugin # for loading .env files
  # - serverless-layers # for creating layers

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: ${self:custom.memorySize.${self:provider.stage}}
  environment:
    ENVIRONMENT: ${self:provider.stage}
    TASKS_TABLE: ${self:service}-${self:provider.stage}-Tasks
    JOB_PROGRESS_TABLE: ${self:service}-${self:provider.stage}-JobProgress
    IMAGE_HASH_TABLE: ${self:service}-${self:provider.stage}-ImageHashes
    SQS_QUEUE_URL: 
      Ref: EligibleImageQueue
    DEAD_LETTER_QUEUE_URL:
      Ref: ImageDeadLetterQueue
    SUPABASE_URL: ${env:SUPABASE_URL}
    SUPABASE_API_KEY: ${env:SUPABASE_API_KEY}
    DELIVERY_LAMBDA_PROCESSOR_NAME: ${self:service}-${self:provider.stage}-deliveryProcessor
    JOB_PROGRESS_QUEUE_URL: ${env:JOB_PROGRESS_QUEUE_URL}
  iam:
    role: BaseCloudWatchRole
  logRetentionInDays: ${self:custom.logRetention.${self:provider.stage}}
  logs:
    # restApi:
      # accessLogging: true
      # executionLogging: true
      # level: INFO
      # fullExecutionData: true
    restApi: false
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  stackTags:
    CLOUDFORMATION_DEBUG_LOG: true

# re-usable variables
custom:
  memorySize:
    prod: 256
    dev: 128
  logRetention:
    prod: 30
    dev: 7
  bucketName: ${self:service}-${self:provider.stage}-bucket
  queueName: ${self:service}-${self:provider.stage}-queue
  deploymentBucketName: ${self:service}-${self:provider.stage}-${self:provider.region}-deploys
  dotenv:
    path: .env.${self:provider.stage}
  deadLetterQueueName: ${self:service}-${self:provider.stage}-dlq
  serverless-offline:
    region: ${self:provider.region}
  # serverless-layers:
  #   dependenciesPath: ./package.json
  #   layersDeploymentBucket: prismix-lambda-layers

# Lambda Layers
# layers:
#   sharpLayer:
#     path: layers/sharp-layer
#     name: ${self:service}-${sls:stage}-sharp-layer
#     description: Sharp library for image processing functions
#     compatibleRuntimes:
#       - nodejs20.x
#     package:
#       patterns:
#         - '!**'
#         - 'nodejs/**'
#   supabaseLayer:
#     path: layers/supabase-layer
#     name: ${self:service}-${sls:stage}-supabase-layer
#     description: Supabase client for database operations
#     compatibleRuntimes:
#       - nodejs20.x
#     package:
#       patterns:
#         - '!**'
#         - 'nodejs/**'

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!layers/**'

functions:
  ${file(src/resources/functions.yml)}

resources:
  - ${file(src/resources/eventbridge.yml)}
  - ${file(src/resources/s3.yml)}
  - ${file(src/resources/sqs.yml)}
  - ${file(src/resources/dynamodb.yml)}
  - ${file(src/resources/iam-roles.yml)}
  - Resources:
      LayersDeploymentBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:custom.deploymentBucketName}
          VersioningConfiguration:
            Status: Enabled

    Outputs:
      S3BucketName:
        Description: User uploaded images
        Value: 
          Ref: PrismixImageBucket
      SQSQueueUrl:
        Description: SQS Queue URL
        Value:
          Ref: EligibleImageQueue
      SQSQueueArn:
        Description: SQS Queue ARN
        Value:
          Fn::GetAtt: [EligibleImageQueue, Arn]
      DeadLetterQueueUrl:
        Description: Dead Letter Queue URL
        Value:
          Ref: ImageDeadLetterQueue
      DeadLetterQueueArn:
        Description: Dead Letter Queue ARN
        Value:
          Fn::GetAtt: [ImageDeadLetterQueue, Arn]
      TasksTableName:
        Description: DynamoDB Tasks Table Name
        Value: 
          Ref: TasksTable
      TasksTableArn:
        Description: DynamoDB Tasks Table ARN
        Value:
          Fn::GetAtt: [TasksTable, Arn]
      ServerlessDeploymentBucketName:
        Value: 
          Ref: LayersDeploymentBucket
        Export:
          Name: ${self:service}-${self:provider.stage}-ServerlessDeploymentBucketName

  Resources:
    S3TransferFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-s3-transfer-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: s3-transfer-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                # S3 Permissions for source bucket
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${self:custom.sourceUserBucketArn}
                    - arn:aws:s3:::${self:custom.sourceUserBucketArn}/*
                
                # S3 Permissions for destination bucket
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.destinationBucketName}
                        - "/*"
                
                # RDS Permissions
                - Effect: Allow
                  Action:
                    - rds-db:connect
                  Resource:
                    - arn:aws:rds-db:${self:provider.region}:${aws:accountId}:dbuser:${self:custom.rds.resourceId}/${self:custom.rds.username}

functions:
  s3BucketTransfer:
    handler: src/handlers/s3BucketTransfer.handler
    timeout: 900 # 15 minutes
    memorySize: 1024
    environment:
      DESTINATION_BUCKET: ${self:custom.destinationBucketName}
      RDS_HOST: ${self:custom.rds.host}
      RDS_PORT: ${self:custom.rds.port}
      RDS_DATABASE: ${self:custom.rds.database}
      RDS_USERNAME: ${self:custom.rds.username}
      RDS_PASSWORD: ${self:custom.rds.password}
    role: !GetAtt S3TransferFunctionRole.Arn

custom:
  destinationBucketName: prismix-image-bucket-${self:provider.stage}
  sourceUserBucketArn: "*" # This allows access to any user bucket. You might want to restrict this.
  rds:
    host: ${ssm:/rds/host}
    port: ${ssm:/rds/port}
    database: ${ssm:/rds/database}
    username: ${ssm:/rds/username}
    password: ${ssm:/rds/password}
    resourceId: ${ssm:/rds/resource-id}